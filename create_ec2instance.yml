---
- name: Creating an EC2 Instance with Creating a VPC and Subnet Id
  hosts: localhost
  tasks:
    - name: Create a new VPC 
      amazon.aws.ec2_vpc_net:
        name: "Ansible-VPC"
        cidr_block: "{{ cidr_block }}"
        region: "{{ region }}"
      register: vpc
  
    - name: Create a new Subnet
      amazon.aws.ec2_vpc_subnet:
        name: "Ansible-Subnet"
        cidr: "{{ cidr }}"
        region: "{{ region }}"
        vpc_id: "{{ vpc.vpc.id }}"
      register: subnet

    - ansible.builtin.debug:
        var: subnet.subnet.id
    
    - name: Create a Security Group  
      amazon.aws.ec2_security_group:
        name: "Ansible-Security-Group"
        description: "Ansible-Testing"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            ports:
            - 80
            cidr_ip: 0.0.0.0/0
            rule_desc: "allow all on port 80"
          - proto: tcp
            ports:
            - 22
            cidr_ip: 0.0.0.0/0
            rule_desc: "allow all on port 22"
      register: security_group
    
    - ansible.builtin.debug:
        var: security_group.group_id

    - name: Create VPC IGW 
      amazon.aws.ec2_vpc_igw:
        name: "Ansible-IGW"
        region: "{{ region }}"
        vpc_id: "{{ vpc.vpc.id }}"
        register: igw
        until: igw is not failed
        retries: 15 

    - name: Set VPC public subnet route table
      amazon.aws.ec2_vpc_route_table:
        name: "Ansible-Route-Table"
        region: "{{ region }}"
        vpc_id: "{{ vpc.vpc.id }}"
        subnets:
          - "{{ subnet.subnet.id }}"
        routes: 
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        register: routetable
        until: routetable is not failed
        retries: 5

    - name: Launch an EC2 Instance
      amazon.aws.ec2_instance:
        name: "{{ ec2_instance_name }}"
        key_name: "{{ key_name }}"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        instance_type: "{{ instance_type }}"
        security_group: "{{ security_group.group_id  }}"
        count: 1
        wait: yes
        aws_region: "{{ region }}"
        network:
          assign_public_ip: true
        image_id: "{{ ami }}"
